#!/usr/bin/env bash
# Copyright (c) 2013 Shotgun Software Inc.
# 
# CONFIDENTIAL AND PROPRIETARY
# 
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit 
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your 
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights 
# not expressly granted therein are reserved by Shotgun Software Inc.

# set SHOTGUN_SERVER if not set
if [ -z "$SHOTGUN_SERVER" ]; then
    export SHOTGUN_SERVER="http://shotgun-dev.d2.com"
fi

# get absolute location of this script
SELF_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

# resolve symlinks
while [ -h "$SELF_PATH" ]; do
    # 1) cd to directory of the symlink
    # 2) cd to the directory of where the symlink points
    # 3) get the pwd
    # 4) append the basename
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink "$SELF_PATH")
    SELF_PATH=$(cd "$DIR" && cd $(dirname -- "$SYM") && pwd)/$(basename -- "$SYM")
done

# chop off the file name
SELF_PATH=$(dirname "$SELF_PATH")

# get the current working directory
CURR_PATH=`pwd -P`

# Set TANK_CURRENT_PC if not set and we can determine config location
# Check this by looking for the roots.yml file
if [ -z "$TANK_CURRENT_PC" ]; then
    if [ -f "$CURR_PATH/config/core/roots.yml" ]; then
        export TANK_CURRENT_PC=$CURR_PATH
    elif [ -f "$SELF_PATH/config/core/roots.yml" ]; then
        export STUDIO_TANK_PATH=$SELF_PATH
    fi
fi

# Set STUDIO_TANK_PATH if not set
if [ -z $STUDIO_TANK_PATH ]; then

    # Check current and tank cmd path by looking for the info.yml file
    if [ -f "$CURR_PATH/install/core/info.yml" ]; then
        export STUDIO_TANK_PATH=$CURR_PATH

    elif [ -f "$SELF_PATH/install/core/info.yml" ]; then
        export STUDIO_TANK_PATH=$SELF_PATH

    # Else check if the core path is defined in the pipeline config
    elif [ ! -z "$TANK_CURRENT_PC" ]; then

        # the parent location is stored in a config file
        CURR_PLAT=`uname`
        if [[ "${CURR_PLAT}" == MINGW64_NT* ]] || [[ "${CURR_PLAT}" == MINGW32_NT* ]] ||
           [[ "${CURR_PLAT}" ==  CYGWIN_NT* ]]; then
            CURR_PLAT="Windows"
        fi

        CFG_FILE="$TANK_CURRENT_PC/install/core/core_${CURR_PLAT}.cfg"
        if [ ! -f "$CFG_FILE" ]; then
            echo "Cannot find parent configuration file $CFG_FILE!"
            exit 1
        fi

        # now get path to parent
        # by eval-ing the contents we are expanding any environment variables that may
        # exist in the parent config file. For example, if the parent_config_file contains
        # $STUDIO_TANK_PATH, it will be expanded correctly assuming the env var exists.
        CORE_PATH=$( eval echo $( cat "CFG_FILE" ) )
        # and check that it exists...
        if [ ! -d "$CORE_PATH" ]; then
            echo "Cannot find parent $CORE_PATH defined in config file $CFG_FILE!"
            exit 1
        fi

        # Setting discovered STUDIO_TANK_PATH
        export STUDIO_TANK_PATH=$CORE_PATH

    else
        echo "Cannot determine SGTK core location."
        exit 1
    fi
fi

# first of all, for performance, check if the command is shotgun_get_actions
# syntax ./tank shotgun_get_actions cache_file_name env_yml_file_name
# returns 0 and outputs action cache contents to stdout on success
# returns 1 if the cache file is older than the yml file.
# returns 2 if the yml file does not exist
if [ -n "$1" ] && [ "$1" = "shotgun_get_actions" ]; then

    CACHE_FILE="$TANK_CURRENT_PC/cache/$2"
    ENV_FILE="$TANK_CURRENT_PC/config/env/$3"

    # return 2 if the yml file does not exist
    if [ ! -f "$ENV_FILE" ];
    then
        exit 2
    fi

    # return cache contents if cache is up to date
    if [ "$CACHE_FILE" -nt "$ENV_FILE" ]; then
        cat "$CACHE_FILE"
        exit 0
    else
        exit 1
    fi
fi

# if we have a local install of the core, this is the script to dispatch to
TANK_SCRIPT="$STUDIO_TANK_PATH/install/core/scripts/tank_cmd.sh"

# when called from shotgun, we reroute to a special script which uses a login shell shebang.
if [ -n "$1" ] && ( [ "$1" = "shotgun_run_action" ] || [ "$1" = "shotgun_cache_actions" ] ); then
    TANK_SCRIPT="$STUDIO_TANK_PATH/install/core/scripts/tank_cmd_login.sh"
fi

if [ ! -f "$TANK_SCRIPT" ]; then
    echo "$STUDIO_TANK_PATH is not a valid SGTK Core. Missing $TANK_SCRIPT"
    exit 1
fi

# run tank script
if [ ! -z "$TANK_CURRENT_PC" ]; then
    "$TANK_SCRIPT" "$STUDIO_TANK_PATH" "$@" --pc="$TANK_CURRENT_PC"
else
    "$TANK_SCRIPT" "$STUDIO_TANK_PATH" "$@"
fi
